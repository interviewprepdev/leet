1. Rotating array/linkedlist?: If n is the size of the array then rotating k values is same as rotating k%n values. Likewise, if you want to find nextGreaterElement in a circular array we can iterate over the array twice with k%n as the array index. 
2. Using stack pattern:
  a) https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/   -- Minimum Cost Tree From Leaf Values
  b) https://leetcode.com/problems/sum-of-subarray-minimums/discuss/170750/C++JavaPython-Stack-Solution  -- sum of sub array minimums
  c) https://leetcode.com/problems/online-stock-span/discuss/168311/C++JavaPython-O(1) -- ONline stock plan
  d) https://leetcode.com/problems/score-of-parentheses/discuss/141777/C++JavaPython-O(1)-Space -- Score of parantheses
  e) Next Greater Element I
Largest Rectangle in Histogram
Trapping Rain Water
 3. Java Prioroty Queue: 
  a) https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/discuss/?currentPage=1&orderBy=most_votes&query=
      Priority queue: b - a - in descending order and a-b in ascending - by default java orders elements in ascending order/min heap
 4. Hashset:
    a) Two sum
    b) https://leetcode.com/problems/fair-candy-swap/
 5. Implement stack using queues and queues using stack:
      a) Queues can be implemented in amortized time using stack but not vice-versa
      b) for two queue stack solution will have to swap queues on pop()
6. Intervals:
  a) sometimes having a priority queue helps to hold the end interval value and pop it off when the interval ends
  b) another way is to have a treemap - haven't tried it but seems much easier and fewer lines of code. For example, for treemap for carpool problem would have start+noOfPeople and end - no.OfPeople as value
7. BFS:
   - BFS can give you shortest path if in an unweighted graph Example problem: 
    https://leetcode.com/problems/shortest-path-in-binary-matrix/discuss/312706/JAVA-BFS
    More notes here: https://stackoverflow.com/questions/8379785/how-does-a-breadth-first-search-work-when-looking-for-shortest-path
    If follow up for above leetcode question is find and print the path as well, will it become dijstras?
 8. Tree:
    Traversing a BST in in-order is like traversing through a sorted array
 9. Topological sort: Topological sort is for DAG: Directed Acyclic graph, i.e, a graph with direction but no cycles. 
    tempalte: https://leetcode.com/problems/course-schedule-ii/discuss/190393/Topological-Sort-Template-General-Approach!!
    bascially having two hashmaps. One is hashmap<Integer, List<Integer>> List here is nodes that are dependent on key and another for hashmap<integer, integer> indegree map. If indegree is 0, then all the dependents are visited, it's time to visit this node. If at some point, none of the indegrees are 0 but there are still nodes to be visited then there is cycle. 
 10.     Union find:  
    
    1. good article on union find: https://medium.com/@RamkrishnaKulka/disjoint-set-union-union-find-the-same-blood-type-e67c51b1d2
    2. Finding a cycle in undirected graph: walk through all the edges and when adding an edge if both the vertices are already in the same set then there is a cycle
    
 
Quick select:
Dynamic programming:
matrix
Dijkstras:
Wiggle sort?:
Trie
Segment tree

Other:
unit tests
Multi-threading - do leetcode probs related to this as well
design patterns
may be maven and other build tools
Random function in java used in some of the quickselects like find Kth largest to have amortized O(N)
Kadane's reference: https://medium.com/@rsinghal757/kadanes-algorithm-dynamic-programming-how-and-why-does-it-work-3fd8849ed73d
Advanced: A* 
Binary Search:
Template? https://leetcode.com/discuss/general-discussion/786126/Python-Powerful-Ultimate-Binary-Search-Template.-Solved-many-problems -- still reading
Condition function for kths smallest number in multiplication table: https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/discuss/1580357/C%2B%2BPython-Clean-and-Simple-Solution-w-Detailed-Explanation-or-Binary-Search-with-Proof


Math forumlae:
- Sum of first n numbers  1 + 2+ 3+...+n = n * (n+1) /2
- Sum of squares: 1^2 + 2^2 +......n^2 = n * (n+1) * (2n+1) /6


To look at later:
- 4 sum or k sum 
- iterative approach of sorting linkedlist - may be not worth it for just saving O(log n) stack in recursion


Binary search template:

def binary_search(array) -> int:
    def condition(value) -> bool:
        pass
    left, right = 0, len(array)
    while left < right:
        mid = left + (right - left) // 2
        if condition(mid):
            right = mid
        else:
            left = mid + 1
    return left
