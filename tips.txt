1. Rotating array/linkedlist?: If n is the size of the array then rotating k values is same as rotating k%n values. Likewise, if you want to find nextGreaterElement in a circular array we can iterate over the array twice with k%n as the array index. 
2. Using stack pattern:
  a) https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/   -- Minimum Cost Tree From Leaf Values
  b) https://leetcode.com/problems/sum-of-subarray-minimums/discuss/170750/C++JavaPython-Stack-Solution  -- sum of sub array minimums
  c) https://leetcode.com/problems/online-stock-span/discuss/168311/C++JavaPython-O(1) -- ONline stock plan
  d) https://leetcode.com/problems/score-of-parentheses/discuss/141777/C++JavaPython-O(1)-Space -- Score of parantheses
  e) Next Greater Element I
Largest Rectangle in Histogram
Trapping Rain Water
 3. Java Prioroty Queue: 
  a) https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/discuss/?currentPage=1&orderBy=most_votes&query=
      Priority queue: b - a - in descending order and a-b in ascending - by default java orders elements in ascending order/min heap
 4. Hashset:
    a) Two sum
    b) https://leetcode.com/problems/fair-candy-swap/
 5. Implement stack using queues and queues using stack:
      a) Queues can be implemented in amortized time using stack but not vice-versa
      b) for two queue stack solution will have to swap queues on pop()
    
    
    Tree:
    1. Traversing a BST in in-order is like traversing through a sorted array
 

Binary Search:
Template? https://leetcode.com/discuss/general-discussion/786126/Python-Powerful-Ultimate-Binary-Search-Template.-Solved-many-problems -- still reading
Condition function for kths smallest number in multiplication table: https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/discuss/1580357/C%2B%2BPython-Clean-and-Simple-Solution-w-Detailed-Explanation-or-Binary-Search-with-Proof


Math forumlae:
- Sum of first n numbers  1 + 2+ 3+...+n = n * (n+1) /2
- Sum of squares: 1^2 + 2^2 +......n^2 = n * (n+1) * (2n+1) /6
